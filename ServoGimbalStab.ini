/*
 KAVARAHU
*/
int sensorCenter[] = { 310, 370};  // variable to store the sensor level position
int minPos[] = { 45, 45, 0};       // variable to store the minimum servo position
int maxPos[] = { 135, 135, 180};        // variable to store the maximum servo position
int Proportional = 5;         // P  // how far the servo moves compared to the sensor
int Integer = 5;              // I  // how far sensor moves before calling for change

#define reverse1           // reverse direction of servo1
//#define reverse2              // reverse direction of servo2
#define reverse3            // reverse direction of servo3
//#define reversePWM2         // reverse direction of PWM2 
//#define trimpots             // 
#define DEBUG               // Turn on serial output

int servoPin[] = { 5, 6, 9};          // PWM output pin that the servo1 is attached to
const int analogInPin[] = { 0, 1, 2, 3, 4}; // Analog input pin that the accelerometer is attached to
#ifdef trimpots
int outputValue[] = { 0, 0};                // variable to store from the trimpot
#endif
int sensorValue[] = { 0, 0, 0, 0, 0};       // value read from the accelerometer
int sensorOffset[] = { 0, 0};               // variable to store the sensor offset
volatile int pwmValue[] = { 0, 0};          // variable to store the PWM1
volatile int prevTime[] = { 0, 0};          // timer used to read PWM1
volatile int pwmOutput[] = { 0, 0};         // mapped output of PWM1

#include <Servo.h>
Servo servo1;                 // create servo object to control a servo
Servo servo2;                 // create servo object to control a servo
Servo servo3;                 // create servo object to control a servo
int centerPos[] = { 90, 90, 90};          // variable to store the servo position

// Interrupt cycle to read PWM
void rising1 () {                             // Pin finishes going high and starts going low
  prevTime[0] = micros();                     // Start timer when low
  attachInterrupt(0, falling1, FALLING);      // Change function of Interrupt 
}
void falling1() {                             // Pin finishes going low and starts going high
  detachInterrupt(0);                         // Detach this Interrupt so next low doesnt interrupt
  pwmValue[0] = micros() - prevTime[0];       // Stop timer the time it took is the pwm value
  attachInterrupt(1, rising2, RISING);        // Attach next Interrupt
}
void rising2 () {                             // Pin finishes going high and starts going low
  prevTime[1] = micros();                     // Start timer when low
  attachInterrupt(1, falling2, FALLING);      // Change function of Interrupt 
}
void falling2() {                             // Pin finishes going low and starts going high
  detachInterrupt(1);                         // Detach this Interrupt so next low doesnt interrupt
  pwmValue[1] = micros() - prevTime[1];       // Stop timer the time it took is the pwm value
  attachInterrupt(0, rising1, RISING);        // Attach next Interrupt
}

void setup() {
#ifdef DEBUG  
  Serial.begin(9600);                      // initialize serial communications at 9600 bps:
#endif  
  attachInterrupt(0, rising1, RISING);   // Start the Interrupt cycle to read PWM
  servo1.attach(servoPin[0]);                // attaches the servo on pin 3 to the servo object
  servo2.attach(servoPin[1]);                // attaches the servo on pin 5 to the servo object
  servo3.attach(servoPin[2]);                // attaches the servo on pin 6 to the servo object
  servo1.write(centerPos[0]);                // tell servo to go to position in variable
  servo2.write(centerPos[1]);                // tell servo to go to position in variable
  servo3.write(centerPos[2]);                // tell servo to go to position in variable
  delay(150);                              // waits for the servo to reach the position
}

void loop() {
  // read the analog in value of the accelerometer
  sensorValue[0] = analogRead(analogInPin[0]);
  sensorValue[1] = analogRead(analogInPin[1]);
  
#ifdef trimpots
  // read the analog in value of the Trimpots
  sensorValue[2] = analogRead(analogInPin[2]);
  sensorValue[3] = analogRead(analogInPin[3]);
  sensorValue[4] = analogRead(analogInPin[4]);
  // map it to the range of the analog out
  outputValue[0] = map(sensorValue[2], 0, 1023, 200, 0);
  outputValue[1] = map(sensorValue[3], 0, 1023, 0, 200);
  centerPos[2] = map(sensorValue[4], 0, 1023, minPos[2], maxPos[2]);
  // check trimpot does not try to go past sensor limits
  constrain(0, outputValue[0], 200);
  constrain(0, outputValue[1], 200);
  // mix output of trimpot with sensor center
  sensorOffset[0] = sensorCenter[0] - 100 + outputValue[0];
  sensorOffset[1] = sensorCenter[1] - 100 + outputValue[1];
#else
  sensorOffset[0] = sensorCenter[0];
  sensorOffset[1] = sensorCenter[1];
#endif
  
  // check pwm exists if not than output a pwm center signal
  if (pwmValue[0] < 400 || pwmValue[0] > 3000) {
    pwmValue[0] = 1500;
  }
  if (pwmValue[1] < 400 || pwmValue[1] > 3000) {
    pwmValue[1] = 1500;
  }
  
  // map pwm1 to servo 3
#ifdef  reverse3
  pwmOutput[0] = map(pwmValue[0], 544, 2400, maxPos[2], minPos[2]);
#else
  pwmOutput[0] = map(pwmValue[0], 544, 2400, minPos[2], maxPos[2]);
#endif
  centerPos[2] += - ((maxPos[2] - minPos[2])/2) + pwmOutput[0];
  
  // map pwm2 and mix with sensorOffset[0]
#ifdef reversePWM2  
  pwmOutput[1] = map(pwmValue[1], 544, 2400, 150, -150);
#else
  pwmOutput[1] = map(pwmValue[1], 544, 2400, -150, 150);
#endif  
  sensorOffset[0] += pwmOutput[1];
  
 // If sensor moves further than Integer. Servo will move proportional to sensor movement
#ifdef reverse1
  if (sensorValue[0] < ( sensorOffset[0] - Integer )) {
    centerPos[0] += - (( sensorOffset[0] - sensorValue[0] ) / Proportional);
  }
  if (sensorValue[0] > ( sensorOffset[0] + Integer )) {
    centerPos[0] += (( sensorValue[0] - sensorOffset[0] ) / Proportional);
  }
#else
  if (sensorValue[0] < ( sensorOffset[0] - Integer )) {
    centerPos[0] += (( sensorOffset[0] - sensorValue[0] ) / Proportional);
  }
  if (sensorValue[0] > ( sensorOffset[0] + Integer )) {
    centerPos[0] += - (( sensorValue[0] - sensorOffset[0] ) / Proportional);
  }
#endif

 // If sensor moves further than Integer. Servo will move proportional to sensor movement
#ifdef reverse2
  if (sensorValue[1] < ( sensorOffset[1] - Integer )) {
    centerPos[1] += - (( sensorOffset[1] - sensorValue[1] ) / Proportional);
  }
  if (sensorValue[1] > ( sensorOffset[1] + Integer )) {
    centerPos[1] += (( sensorValue[1] - sensorOffset[1] ) / Proportional);
  }
#else
  if (sensorValue[1] < ( sensorOffset[1] - Integer )) {
    centerPos[1] += (( sensorOffset[1] - sensorValue[1] ) / Proportional);
  }
  if (sensorValue[1] > ( sensorOffset[1] + Integer )) {
    centerPos[1] += - (( sensorValue[1] - sensorOffset[1] ) / Proportional);
  }
#endif

  // check servo does not try to move past its limits
//  constrain(minPos[0], centerPos[0], maxPos[0]);
//  constrain(minPos[1], centerPos[1], maxPos[1]);
//  constrain(minPos[2], centerPos[2], maxPos[2]);
    if (centerPos[0] < minPos[0]) {
    centerPos[0] = minPos[0];
  }
  if (centerPos[0] > maxPos[0]) {
    centerPos[0] = maxPos[0];
  }
  if (centerPos[1] < minPos[1]) {
    centerPos[1] = minPos[1];
  }
  if (centerPos[1] > maxPos[1]) {
    centerPos[1] = maxPos[1];
  }
  if (centerPos[2] < minPos[2]) {
    centerPos[2] = minPos[2];
  }
  if (centerPos[2] > maxPos[2]) {
    centerPos[2] = maxPos[2];
  }
  // tell servo to go to position in variable
  servo1.write(centerPos[0]);
  servo2.write(centerPos[1]);
  servo3.write(centerPos[2]);
  
#ifdef DEBUG  
  delay(15);                              // waits for the servo to reach the position
  // print the results to the serial monitor:
  Serial.print("sensor1 = ");
  Serial.print(sensorValue[0]);
#ifdef trimpots
  Serial.print(" sensor3 = ");
  Serial.print(sensorValue[2]);
  Serial.print(" offset1 = ");
  Serial.print(outputValue[0]);
#endif
  Serial.print(" PWM2 = ");
  Serial.print(pwmValue[1]);
  Serial.print(" servo1 = ");
  Serial.print(centerPos[0]);
  Serial.print(" sensor2 = ");
  Serial.print(sensorValue[1]);
#ifdef trimpots
  Serial.print(" sensor4 = ");
  Serial.print(sensorValue[3]);
  Serial.print(" offset2 = ");
  Serial.print(outputValue[1]);
#endif
  Serial.print(" servo2 = ");
  Serial.print(centerPos[1]);
  Serial.print(" PWM1 = ");
  Serial.print(pwmValue[0]);
  Serial.print(" servo3 = ");
  Serial.print(centerPos[2]);
  Serial.println();
#else
  delay(150);                              // waits for the servo to reach the position
#endif
}


